#include <stdio.h>
#include <limits.h>

#define V 4 

int tsp(int graph[V][V], int visited[], int pos, int count, int cost, int start, int *minCost, int currentPath[]) {
    if (count == V && graph[pos][start]) {
        int totalCost = cost + graph[pos][start];
        printf("Completed path: ");
        for (int i = 0; i < V; i++) {
            printf("%d -> ", currentPath[i]);
        }
        printf("%d (Cost: %d)\n", start, totalCost);
        
        if (totalCost < *minCost) {
            *minCost = totalCost;
        }
        return *minCost;
    }

    for (int i = 0; i < V; i++) {
        if (!visited[i] && graph[pos][i]) {
            visited[i] = 1;
            currentPath[count] = i;

            printf("Visiting city %d from city %d (Current cost: %d)\n", i, pos, cost + graph[pos][i]);
            
            tsp(graph, visited, i, count + 1, cost + graph[pos][i], start, minCost, currentPath);

            visited[i] = 0;
        }
    }

    return *minCost;
}

int main() {
    int graph[V][V] = {
        { 0, 10, 15, 20 },
        { 10, 0, 35, 25 },
        { 15, 35, 0, 30 },
        { 20, 25, 30, 0 }
    };

    int visited[V] = {0};
    int start = 0;
    visited[start] = 1;

    int minCost = INT_MAX;
    int currentPath[V]; 

    currentPath[0] = start;

    printf("Starting TSP from city %d\n", start);
    tsp(graph, visited, start, 1, 0, start, &minCost, currentPath);

    printf("Minimum cost of visiting all cities: %d\n", minCost);
    return 0;
}
